import asyncio
import logging
import sqlite3
import uuid
import hendlers
import register
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.deep_linking import create_start_link
from config import *
from keyboards.keyboard import *
from states.state import registration, registration_game, new_game
from keyboards.inline import *
from db import *
from aiogram.types import Update
import admin_panel
import game.tournaments

MAIN_ADMIN_ID = 1155076760
conn = sqlite3.connect("users_database.db")
cursor = conn.cursor()
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS users_database (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE NOT NULL,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    registration_date TEXT, 
    nfgame TEXT
    )
    """
)
cursor.execute("PRAGMA table_info(users_database);")
columns = cursor.fetchall()
column_names = [column[1] for column in columns]

if "unity_coin" not in column_names:
    cursor.execute(
        """
        ALTER TABLE users_database
        ADD COLUMN unity_coin INTEGER DEFAULT 0
        """
    )
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS user_game_messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    game_id TEXT NOT NULL,
    message_id INTEGER NOT NULL,
    UNIQUE(user_id, game_id, message_id)
);
"""
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS game_archive (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    game_id TEXT,
    game_start_time TEXT,
    game_end_time TEXT,
    game_winner TEXT
)
"""
)
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS invitations (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        inviter_id INTEGER,
        invitee_id INTEGER,
        game_id TEXT,
        players_cnt INTEGER,
        needed_players INTEGER,
        is_started INTEGER,
        current_turn_user_id INTEGER,  
        number_of_cards INTEGER,
        FOREIGN KEY(inviter_id) REFERENCES users_database(user_id),
        FOREIGN KEY(invitee_id) REFERENCES users_database(user_id),
        UNIQUE(inviter_id, invitee_id, game_id)
    )
    """
)
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS admins (
        user_id INTEGER UNIQUE
    );
"""
)
cursor.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (MAIN_ADMIN_ID,))
cursor.execute(
    """
        CREATE TABLE IF NOT EXISTS game_state (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            game_id TEXT,
            player_id TEXT,
            cards TEXT,
            last_cards TEXT,
            current_table TEXT, 
            real_bullet TEXT,
            blanks_count INTEGER,
            life_status TEXT,
            UNIQUE(game_id, player_id)
        )
    """
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS tournaments_table (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tournament_id TEXT,
    tournament_prize TEXT,
    tournament_start_time TEXT,
    tournament_end_time TEXT,
    tournament_register_start_time TEXT,
    tournament_register_end_time TEXT,
    tournament_winner TEXT,
    maximum_players INTEGER
)
"""
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS tournament_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tournament_id TEXT,
    user_id INTEGER,
    UNIQUE(tournament_id, user_id)

)
"""
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS tournament_rounds_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tournament_id TEXT,
    round_number TEXT,
    round_user_id TEXT,
    group_number TEXT,
    round_winner TEXT,
    UNIQUE (tournament_id, round_number, group_number, round_user_id, round_winner)
)
"""
)
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS withdraw_options (
        three_month_premium TEXT,
        six_month_premium TEXT,
        twelve_month_premium TEXT,
        hundrad_stars TEXT,
        five_hundrad_stars TEXT,
        thousand_stars TEXT
    )
    """
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS users_referral (
    user_id INTEGER PRIMARY KEY,
    referred_by INTEGER
)
"""
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS unity_coin_referral (
    unity_coin_refferal INTEGER
)
"""
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS game_coin_table (
    game_coin INTEGER DEFAULT 5
)
"""
)
cursor.execute("SELECT COUNT(*) FROM unity_coin_referral")
count = cursor.fetchone()[0]
if count == 0:
    cursor.execute("INSERT INTO unity_coin_referral (unity_coin_refferal) VALUES (10)")
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS excludeds (
    game_id TEXT NOT NULL,
    user_id INTEGER NOT NULL,
    number_of_excluded INTEGER DEFAULT 0,
    UNIQUE(game_id, user_id)
);
"""
)
cursor.execute(
    """
        CREATE TABLE IF NOT EXISTS daily_bonus (
            user_id INTEGER PRIMARY KEY,
            last_claim TEXT
        )
        """
)
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS user_languages (
    user_id INTEGER PRIMARY KEY,
    language TEXT NOT NULL,
    UNIQUE(user_id, language)
    );
    """
)
cursor.execute(
    """
CREATE TABLE IF NOT EXISTS channels_earn (
    channel_id TEXT PRIMARY KEY,
    channel_link TEXT,
    UNIQUE(channel_id)
);
"""
)

cursor.execute(
    """
CREATE TABLE IF NOT EXISTS channel_subscriptions (
    user_id TEXT,
    channel_id TEXT,
    PRIMARY KEY (user_id, channel_id),
    FOREIGN KEY (channel_id) REFERENCES channels_earn(channel_id)
);
"""
)

# cursor.execute("DELETE FROM channels_earn;")
# cursor.execute("DELETE FROM channel_subscriptions;")
# cursor.execute("DELETE FROM tournaments_table;")

conn.commit()
conn.close()


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    conn = sqlite3.connect("users_database.db")
    cursor = conn.cursor()
    cursor.execute("SELECT language FROM user_languages WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()

    if not row and message.text == "/start":
        await message.answer(
            "üü£ Please select your language: \n\nüî¥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: \n\nüîµ Iltimos, tilni tanlang:",
            reply_markup=select_language_button,
        )
        return

    payload = message.text.split(" ", 1)[-1] if " " in message.text else ""
    await state.update_data(payload=payload)
    ln = get_user_language(user_id)
    if "game_" in payload:
        if not is_user_registered(user_id):
            if ln == "ru":
                ms = "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Liar's Fortune! üé≠\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ* –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úçÔ∏è"
            elif ln == "uz":
                ms = "üé≠ Liar's Fortune botiga hush kelibsiz! üé≠\nIltimos. o'zingiz uchun username kiriting ‚úçÔ∏è"
            else:
                ms = "üé≠ Welcome to Liar's Fortune! üé≠\nPlease enter *correct* username ‚úçÔ∏è\n\n"
            await message.answer(ms, reply_markup=get_username_button(ln))
            await state.set_state(registration_game.pref1_name)
            return

        game_id = payload.split("game_")[1]
        if get_player_count(game_id) == 0:
            if ln == "ru":
                ms = "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. ‚òπÔ∏è"
            elif ln == "uz":
                ms = "O'yin allaqachon tugagan yoki to'xtatilgan. ‚òπÔ∏è"
            else:
                ms = "Game has already finished or been stopped. ‚òπÔ∏è"
            await message.answer(ms)
            return
        if game_id == get_game_id_by_user(user_id):
            if user_id == get_game_inviter_id(game_id):
                if ln == "ru":
                    ms = "–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—å üßë‚Äçüíª"
                elif ln == "uz":
                    ms = "Siz yaratuvchi sifatida allaqochon ushbu o'yindasiz üßë‚Äçüíª"
                else:
                    ms = "You are already in this game as a creator üßë‚Äçüíª"
                await message.answer(ms)
            else:
                if ln == "ru":
                    ms = "–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ üòá"
                elif ln == "uz":
                    ms = "Siz allaqochon ushbu o'yindasiz üòá"
                else:
                    ms = "You are already in this game üòá"
                await message.answer(ms)
            return
        if get_needed_players(game_id) <= get_player_count(game_id):
            if ln == "ru":
                ms = "–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω–∞ üòû"
            elif ln == "uz":
                ms = "Boshqa o'yinchi uchun bo'sh joy qolmagan yoki o'yin allaqachon tugagan üòû"
            else:
                ms = "There is no available space for another player or the game has already finished üòû"
            await message.answer(ms)
            await state.clear()
            return

        user = message.from_user
        inviter_id = get_game_inviter_id(game_id)
        if not inviter_id:
            if ln == "ru":
                ms = "–≠—Ç–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äã‚Äã—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º."
            elif ln == "uz":
                ms = "Ushbu o'yin tugagan yoki yaratuvchi tomonidan to'xtatilgan."
            else:
                ms = "This game has finished or been stopped by the creator."
            await message.answer(ms)
            await state.clear()
            return
        if inviter_id and inviter_id == user.id:
            if ln == "ru":
                ms = "–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ –∫–∞–∫ —Å–æ–∑–¥–∞—Ç–µ–ª—å üßë‚Äçüíª"
            elif ln == "uz":
                ms = "Siz yaratuvchi sifatida allaqochon ushbu o'yindasiz üßë‚Äçüíª"
            else:
                ms = "You are already in this game as a creator üßë‚Äçüíª"
            await message.answer(ms)
            return
        if is_user_in_game(game_id, user.id):
            if ln == "ru":
                ms = "–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ üòá"
            elif ln == "uz":
                ms = "Siz allaqochon ushbu o'yindasiz üòá"
            else:
                ms = "You are already in this game üòá"
            await message.answer(ms)
            return
        if not inviter_id:
            if ln == "ru":
                ms = "–≠—Ç–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äã‚Äã—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º."
            elif ln == "uz":
                ms = "Ushbu o'yin tugagan yoki yaratuvchi tomonidan to'xtatilgan."
            else:
                ms = "This game has finished or been stopped by the creator."
            await message.answer(ms)
            await state.clear()
            return
        if has_incomplete_games(user_id):
            if ln == "ru":
                ms = "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã! \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ‚ôªÔ∏è"
                kb = stop_incomplete_games_ru
            elif ln == "uz":
                ms = "Sizda hali tugallanmagan o'yin bot! \nIltimos avval shuni tugating so'ng qaytadan urinib ko'ring. ‚ôªÔ∏è"
                kb = stop_incomplete_games_uz
            else:
                ms = "You have incomplete games! \nPlease stop them first and try again. ‚ôªÔ∏è"
                kb = stop_incomplete_games
            await message.answer(
                ms,
                reply_markup=kb,
            )
            await state.clear()
            return

        insert_invitation(inviter_id, user.id, game_id)
        player_count = get_player_count(game_id)
        if player_count < 2:
            if ln == "ru":
                ms = "–≠—Ç–∞ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äã‚Äã—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º."
            elif ln == "uz":
                ms = "Ushbu o'yin tugagan yoki yaratuvchi tomonidan to'xtatilgan."
            else:
                ms = "This game has finished or been stopped by the creator."
            await message.answer(ms)
            await state.clear()
            return
        name = get_user_nfgame(user.id)
        ln1 = get_user_language(inviter_id)
        if ln1 == "ru":
            ms1 = (
                f"–ò–≥—Ä–æ–∫ {name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ üéâ \n–ò–≥—Ä–æ–∫–∏ –≤ –∏–≥—Ä–µ: {player_count}"
            )
        elif ln1 == "uz":
            ms1 = f"{name} o'yinga qo'shildi üéâ\nO'yinchilar soni: {player_count}"
        else:
            ms1 = f"Player {name} has joined the game üéâ \nPlayers in the game: {player_count}"
        if ln == "ru":
            ms = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! ü§©\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {player_count}\n–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. üòä"
        elif ln == "uz":
            ms = f"Siz o'yinga muvaffaqiyatli qo'shildingiz! ü§©\nO'yindagi o'yinchilar soni: {player_count}\nO'yin boshlangunicha kutib turing. üòä"
        else:
            ms = f"You have successfully joined the game! ü§©\nCurrent number of players: {player_count}\nWaiting for everyone to be ready. üòä"

        await message.answer(ms)
        await bot.send_message(inviter_id, ms1)
        if get_needed_players(game_id) == get_player_count(game_id):
            if ln1 == "ru":
                ms = "–í—Å–µ –∏–≥—Ä–æ–∫–∏ –≥–æ—Ç–æ–≤—ã. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. "
                kb = start_stop_game_ru
            elif ln1 == "uz":
                ms = "Barcha o'yinchilar tayyor. O'yinni hoziroq boshlashingiz mumkin."
                kb = start_stop_game_uz
            else:
                ms = "All players ready. You can start the game right now."
                kb = start_stop_game
            await bot.send_message(
                inviter_id,
                ms,
                reply_markup=kb,
            )
        await state.clear()
    else:
        user = message.from_user
        if is_user_registered(user.id):
            if ln == "ru":
                ms = "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üëá"
            elif ln == "uz":
                ms = "Siz asosiy menudasiz üëá "
            else:
                ms = "You are in main menu üëá"
            await message.answer(
                ms,
                reply_markup=get_main_menu(user.id),
            )
        else:
            if ln == "ru":
                ms = "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Liar's Fortune! üé≠\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ* –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úçÔ∏è"
            elif ln == "uz":
                ms = "üé≠ Liar's Fortune botiga hush kelibsiz! üé≠\nIltimos. o'zingiz uchun username kiriting ‚úçÔ∏è"
            else:
                ms = "üé≠ Welcome to Liar's Fortune! üé≠\nPlease enter *correct* username ‚úçÔ∏è\n\n"
            await message.answer(ms, reply_markup=get_username_button(ln))
            await state.set_state(registration.pref_name)


@dp.callback_query(lambda c: c.data.startswith("lan_"))
async def set_language(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    language = callback.data.split("lan_")[1]
    conn = sqlite3.connect("users_database.db")
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO user_languages (user_id, language) VALUES (?, ?)
        ON CONFLICT(user_id) DO UPDATE SET language = excluded.language
        """,
        (user_id, language),
    )
    conn.commit()
    conn.close()

    await callback.message.delete()
    await state.clear()
    await cmd_start(callback.message, state)


@dp.message(F.text.in_(["start game üéÆ", "o'yinni boshlash üéÆ", "–Ω–æ–≤–∞—è –∏–≥—Ä–∞ üéÆ"]))
async def start_game_handler(message: types.Message, state: FSMContext):
    ln = get_user_language(message.from_user.id)
    if ln == "ru":
        ms = "–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –∏ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–Ω–æ–ø–∫—É –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ‚ùóÔ∏è"
    elif ln == "uz":
        ms = "Siz turnirda ishtirok etyapsiz va turnir tugamaguncha bu tugmadan foydalana olmaysiz ‚ùóÔ∏è"
    else:
        ms = f"You are participating in a tournament and can't use this button until the tournament ends ‚ùóÔ∏è"
    if is_user_in_tournament_and_active(message.from_user.id):
        await message.answer(ms)
        return
    if ln == "ru":
        ms = "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è –∏–≥—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —ç—Ç–æ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ."
        ms1 = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: ‚¨áÔ∏è"
        kb = stop_incomplete_games_ru
        kb1 = count_players_ru
    elif ln == "uz":
        ms = "Sizda hali tugallanmagan o'yin bor. Iltimos, yangi hosil qilishdan oldin avval shuni tugating."
        ms1 = "O'yinchilar sonini kiriting: ‚¨áÔ∏è"
        kb = stop_incomplete_games_uz
        kb1 = count_players_uz
    else:
        ms = f"You have incomplete games. Please finish or stop them before creating a new one."
        ms1 = "Choose the number of players: ‚¨áÔ∏è"
        kb = stop_incomplete_games
        kb1 = count_players
    if message.chat.type == "private":
        if has_incomplete_games(message.from_user.id):
            await message.answer(ms, reply_markup=kb)
            return
        await message.answer(ms1, reply_markup=kb1)
        await state.set_state(new_game.number_of_players)
    else:
        await message.answer("Please use this option in a private chat.")


@dp.message(
    F.text.in_(
        [
            "back to main menu üîô",
            "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üîô",
            "bosh menuga qaytish üîô",
        ]
    )
)
async def start_game_handler(message: types.Message, state: FSMContext):
    await state.clear()
    ln = get_user_language(message.from_user.id)
    if ln == "ru":
        ms = "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üëá"
    elif ln == "uz":
        ms = "Siz asosiy menudasiz üëá "
    else:
        ms = "You are in main menu üëá"
    await message.answer(
        ms,
        reply_markup=get_main_menu(message.from_user.id),
    )


@dp.message(new_game.number_of_players)
async def get_name(message: types.Message, state: FSMContext):
    ln = get_user_language(message.from_user.id)
    if ln == "ru":
        ms = (
            "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –Ω–æ–º–µ—Ä–æ–≤: ‚¨áÔ∏è"
        )
        kb = count_players_ru
    elif ln == "uz":
        ms = "Siz noto'g'ri ma'lumot kiritdingiz! Iltimos, quyidagi raqamlardan birini tanlang: ‚¨áÔ∏è"
        kb = count_players_uz
    else:
        ms = "You have entered wrong information! Please choose one of these numbers: ‚¨áÔ∏è"
        kb = count_players
    cnt = 0
    if message.text == "2Ô∏è‚É£":
        cnt = 2
    elif message.text == "3Ô∏è‚É£":
        cnt = 3
    elif message.text == "4Ô∏è‚É£":
        cnt = 4
    else:
        await message.answer(
            ms,
            reply_markup=kb,
        )
        await state.set_state(new_game.number_of_players)
        return

    user = message.from_user
    game_id = str(uuid.uuid4())
    invite_link = await create_start_link(bot, payload=f"game_{game_id}")
    conn = sqlite3.connect("users_database.db")
    cursor = conn.cursor()
    cursor.execute(
        """
        INSERT INTO invitations (inviter_id, game_id, needed_players)
        VALUES (?, ?, ?)
        """,
        (user.id, game_id, cnt),
    )
    conn.commit()
    conn.close()
    if ln == "ru":
        ms = f"–í–æ—Ç –≤–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –≤–º–µ—Å—Ç–µ üëá"
    elif ln == "uz":
        ms = f"Quida sizning o'yinga taklif havolangiz. Ushbu linkni birga o'ynamoqchi bo'lgan do'stlaringizga yuboring üëá"
    else:
        ms = f"Here is your invitation link. Share this link with your friends to play the game together üëá"
    await message.answer(
        ms,
        reply_markup=get_main_menu(user.id),
    )
    if ln == "ru":
        sharable_message = (
            "üéÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∏–≥—Ä–µ! üéÆ\n\n"
            "–Ø —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª –∏–≥—Ä—É –∏ –±—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å! üòä\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ:\n"
            f"\n{invite_link}\n\n"
        )
    elif ln == "uz":
        sharable_message = (
            "üéÆ O'yinga qo'shiling! üéÆ\n\n"
            "Men siz bilan birga o'ynash uchun o'yin yaratdim va qo ªshilsangiz hursand bo'lar edim! üòä\n\n"
            "O ªyinga qo ªshilish uchun quyidagi havolani bosing:\n"
            f"\n{invite_link}\n\n"
        )
    else:
        sharable_message = (
            "üéÆ Join the Game! üéÆ\n\n"
            "I just created a game, and I'd love for you to join! üòä\n\n"
            "Click the link below to join the game:\n"
            f"\n{invite_link}\n\n"
        )

    await message.answer(
        sharable_message,
    )
    await state.clear()


# @dp.message(F.text == "game status üåü")
# async def start_game_handler(message: types.Message, state: FSMContext):
#     if is_user_in_tournament_and_active(message.from_user.id):
#         await message.answer(f"You are participating in a tournament and can't use this button until the tournament ends!")
#         return
#     game_id = get_game_id_by_user(message.from_user.id)
#     if not has_incomplete_games(message.from_user.id):
#         await message.answer(
#             f"You are not participating in any game currently.",
#             reply_markup=get_main_menu(message.from_user.id),
#         )
#     else:
#         msg = f"Current game status: active ‚úÖ\n"
#         if message.from_user.id == get_game_inviter_id(game_id):
#             msg += f"You are creator of this game üë®‚Äçüíª\nNumber of participants: {get_player_count(game_id)}"
#             await message.answer(msg, reply_markup=generate_exclude_keyboard(game_id))
#         else:
#             msg += f"You are participant in this game üë§\nNumber of participants: {get_player_count(game_id)}"
#             await message.answer(msg, reply_markup=cancel_g)


@dp.message()
async def any_word(msg: types.Message):
    if not is_user_registered(msg.from_user.id):
        await msg.delete()
    else:
        ln = get_user_language(msg.from_user.id)
        if ln == "ru":
            ms = f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∑–Ω–∞–∫–æ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        elif ln == "uz":
            ms = f"Siz noto'g'ri ma'lumot kiritdingiz."
        else:
            ms = f"You entered wrong information."
        await msg.answer(ms)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
